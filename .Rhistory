tabPanel("Tab2", "Tab content 2"),
tabPanel("Tab3", "Note that when side=right, the tab order is reversed.")
)
),
fluidRow(
tabBox(
# Title can include an icon
title = tagList(shiny::icon("gear"), "tabBox status"),
tabPanel("Tab1",
"Currently selected tab from first box:",
verbatimTextOutput("tabset1Selected")
),
tabPanel("Tab2", "Tab content 2")
)
)
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "tabBoxes"),
dashboardSidebar(),
body
),
server = function(input, output) {
# The currently selected tab from the first box
output$tabset1Selected <- renderText({
input$tabset1
})
}
)
shiny::runApp('content/apps/distribuicoes')
rsconnect::deployApp('content/apps/distribuicoes')
runApp('content/apps/stock')
runApp('content/apps/stock')
runApp('content/apps/stock')
runApp('content/apps/stock')
runApp('content/apps/stock')
rsconnect::deployApp('content/apps/stock')
rsconnect::deployApp('content/apps/stock')
library(shiny)
library(DBI)
library(pool)
pool <- dbPool(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
ui <- fluidPage(
textInput("ID", "Enter your ID:", "5"),
tableOutput("tbl"),
numericInput("nrows", "How many cities to show?", 10),
plotOutput("popPlot")
)
server <- function(input, output, session) {
output$tbl <- renderTable({
sql <- "SELECT * FROM City WHERE ID = ?id;"
query <- sqlInterpolate(pool, sql, id = input$ID)
dbGetQuery(pool, query)
})
output$popPlot <- renderPlot({
query <- paste0("SELECT * FROM City LIMIT ",
as.integer(input$nrows)[1], ";")
df <- dbGetQuery(pool, query)
pop <- df$Population
names(pop) <- df$Name
barplot(pop)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
csvFileInput("datafile", "User data (.csv format)")
),
mainPanel(
dataTableOutput("table")
)
)
)
server <- function(input, output, session) {
datafile <- callModule(csvFile, "datafile",
stringsAsFactors = FALSE)
output$table <- renderDataTable({
datafile()
})
}
shinyApp(ui, server)
library(dplyr)
library(lubridate)
library(YaleToolkit)
install.packages("YaleToolkit")
runApp('content/apps/stock')
class()
class(df.sp500)
df.sp500 <- GetSP500Stocks()
#tickers <- df.sp500$tickers
colnames(df.sp500)[1]='cod'
colnames(df.sp500)[2]='company'
# IBOVESPA
df.ibov <- GetIbovStocks()
print(df.ibov$tickers)
df.ibov$cod=paste0(df.ibov$tickers, '.SA')
colnames(df.ibov)[2]='company'
df.ibov=df.ibov[c(7,2,3,1,4,5,6)]
class(df.sp500)
class(df,ibov)
class(df.ibov)
as.data.frame(cbind(df.ibov$cod,df.sp500$cod))
as.data.frame(rbind(df.ibov$cod,df.sp500$cod))
View(as.data.frame(rbind(df.ibov$cod,df.sp500$cod)))
View(as.data.frame(rbind(df.ibov[1:2],df.sp500[1:2])))
df.ibov[1:2]
df.ibov[2:3]
colnames(df.ibov)[2]='company'
df.ibov=df.ibov[c(7,2,3,1,4,5,6)]
colnames(df.ibov)[2]='company'
df.ibov=df.ibov[c(7,2,3,1,4,5,6)]
library(shiny)
library(quantmod)
library(shinyWidgets)
library(BatchGetSymbols)
# SP500
df.sp500 <- GetSP500Stocks()
#tickers <- df.sp500$tickers
colnames(df.sp500)[1]='cod'
colnames(df.sp500)[2]='company'
# IBOVESPA
df.ibov <- GetIbovStocks()
print(df.ibov$tickers)
df.ibov$cod=paste0(df.ibov$tickers, '.SA')
colnames(df.ibov)[2]='company'
df.ibov=df.ibov[c(7,2,3,1,4,5,6)]
as.data.frame(rbind(df.ibov$cod,df.sp500$cod))
View(as.data.frame(rbind(df.ibov[1:2],df.sp500[1:2])))
acoes=as.data.frame(rbind(df.ibov[1:2],df.sp500[1:2]))
runApp('content/apps/stock')
runApp('content/apps/stock')
runApp('content/apps/stock')
runApp('content/apps/stock')
runApp('content/apps/stock')
?switch
library(shiny)
server <- shinyServer(function(input, output) {
output$ui <- renderUI({
if (is.null(input$input_type)) {return()}
fluidRow(column(6, div("Want this to be left column")),
column(6, switch(input$input_type,
"slider" = sliderInput("dynamic", "Want this to be right column",
min = 1, max = 20, value = 10),
"text" = textInput("dynamic", "Want this to be right column",
value = "starting value"),
"numeric" =  numericInput("dynamic", "Want this to be right column",
value = 12),
"checkbox" = checkboxInput("dynamic", "Want this to be right column",
value = TRUE)
)
)
)
})
output$input_type_text <- renderText({input$input_type})
output$dynamic_value <- renderPrint({str(input$dynamic)})
})
ui <- shinyUI(fluidPage(
titlePanel("Dynamically generated user interface components"),
wellPanel(selectInput("input_type", "Input type",
c("slider", "text", "numeric", "checkbox")
)),
wellPanel(uiOutput("ui")),
wellPanel(
tags$p("Input type:"),
verbatimTextOutput("input_type_text"),
tags$p("Dynamic input value:"),
verbatimTextOutput("dynamic_value")
)
))
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Select x Axis"),
sidebarLayout(
sidebarPanel(
selectizeInput("xaxis",
label = "x-Axis",
choices = c("carat", "depth", "table"))
),
mainPanel(
plotOutput("Plot")
)
)
))
server <- shinyServer(function(input, output) {
output$Plot <- renderPlot({
p <- ggplot(diamonds, aes(x = input$xaxis, y = price))
p <-p + geom_point()
print(p)
})
})
# Run the application
shinyApp(ui = ui, server = server)
ui.R
library(shiny)
shinyUI(fluidPage(
titlePanel("Tool"),
sidebarLayout(
sidebarPanel(
textInput("Item","Enter Item Name"),
div(class='row-fluid',
div(class='span6', numericInput("sales1","Enter Sales",value=0),numericInput("sales2","Enter Sales",value=0)),
div(class='span6', numericInput("prices1","Enter price",value=0),numericInput("prices2","Enter price",value=0))
)),
mainPanel(
dataTableOutput("table")
)
)
))
server.R
library(shiny)
shinyServer(function(input, output) {
prices<-reactive({
c(input$prices1,input$prices2)
})
sales<-reactive({
c(input$sales1,input$sales2)
})
combined<-reactive({
data.frame(prices(),sales())
})
combined_final<-reactive({
mutate(combined(),Rev=prices()*sales())
})
namerev<-reactive({
as.character(paste("Rev",input$Item,sep="_"))
})
combined_final_rename<-reactive({
rename_(combined_final(),namerev() ="Rev")
})
output$table<-renderDataTable({
combined_final_rename()
})
})
library(shiny)
library(ggplot2)
data(mpg)
ui <- fluidPage(
inputPanel(
selectInput('x', 'X', choices = c("manufacturer", "model", "year", "cyl", "class"),
selected = "class"),
selectInput('y', 'Y', choices = c( "trans", "fl", "drv"),
selected = "drv")
),
mainPanel(plotOutput("outplot"))
)
server <- function(input, output) {
output$outplot <- renderPlot({
ggplot(mpg, aes_string(x = input$x)) +
geom_bar(aes_string(fill= input$y), position = position_stack(reverse = TRUE)) +
coord_flip() +
theme(legend.position = "top")
})
}
shinyApp(ui = ui, server = server)
data <- as.data.frame(c(98,99,34))
names(data) <- "Projection"
data$User_Prediction <- 0
ui <- shinyUI(
fluidPage(
titlePanel("Basic DataTable"),
# Create a new row for the table.
fluidRow(
column(12,
selectInput("select", label = h3("Select box"),
choices = unique(data$Projection),
selected = unique(data$Projection)[1]),
numericInput("num", label = h3("Numeric input"), value = unique(data$Projection)[1]),
actionButton('btn',"Apply Changes"),
dataTableOutput(outputId="table")
)
)
)
)
server <- shinyServer(function(input, output) {
d <- reactive({
data
})
dat <- reactiveValues(dat=NULL)
observe({
dat$dat <- d()
})
observe({
input$btn
isolate({
num <- input$num
sel <- input$select
})
dat$dat$User_Prediction[dat$dat$Projection==sel] <- num
#d2 <- dat
})
# Better way
#   observeEvent(input$btn,{
#     dat$dat$User_Prediction[dat$dat$Projection==sel] <- num
#   })
# Filter data based on selections
output$table <- renderDataTable({
dat$dat
})
})
shinyApp(ui=ui,server=server)
library(shiny)
library(DT)
values <- c("Revenue","Sales","Refunds","Cancellations")
names <- c("total_revenue","total_sales","total_refunds","total_cancellations")
df <- mtcars[,1:4]
ui <- fluidPage(
selectInput("metric","metric",values),
dataTableOutput("Table")
)
server <- function(input, output, session) {
mydf <- reactive({
name <- switch(input$metric,
"Revenue" = "total_revenue",
"Sales" = "total_sales",
"Refunds" = "total_refunds",
"Cancellations" = "total_cancellations")
names(df)[4] <- name
df
})
output$Table <- renderDataTable({mydf()})
}
shinyApp(ui,server)
library(shiny)
library(shinydashboard)
sidebar <- dashboardSidebar(
selectInput(
"selection", label = "Select",
choices = c("Harriet", "Louise")
)
)
body <- dashboardBody(
fluidRow(
htmlOutput("table"))
)
ui <- dashboardPage(dashboardHeader(title = "Example"),
sidebar,
body
)
server <- function(input, output) {
output$table <- renderTable({
person_a <- c(95, 60)
Terry <- c(77, 81)
score_data <- data.frame(person_a, Terry)
colnames(score_data)[1] <- input$selection
name <- input$selection
score_data$name <- c(90, 60)
return(score_data)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 100, step=5),
verbatimTextOutput("oid1"),
verbatimTextOutput("oid2")
)
server <- function(input, output, session) {
output$oid1 <- renderPrint({input$id1})
x<-reactive({5*input$id1})
output$oid2<-renderPrint({
if (x()>50) {
"You entered a number greater than 10"
} else {
"You entered a number less than or equal to 10"
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
ui = fluidPage(titlePanel("Uploading file in Shiny"),
sidebarLayout(
sidebarPanel(
fileInput(
"myfile",
"Choose CSV File",
multiple = F,
accept = ".csv"
),
checkboxInput("header", "Header", TRUE),
radioButtons(
"choice",
"Display",
choices = c(Head = "head",
All = "all"),
selected = "head"
)
),
mainPanel(tableOutput("contents"))
))
server = function(input, output) {
output$contents = renderTable({
req(input$myfile)
data = read.csv(input$myfile$datapath,
header = input$header)
if (input$choice == "head") {
return(head(data))
}
else {
return(data)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
actionButton("minus", "-1"),
actionButton("plus", "+1"),
br(),
textOutput("value")
)
# The comments below show the equivalent logic using reactiveValues()
server <- function(input, output, session) {
value <- reactiveVal(0)       # rv <- reactiveValues(value = 0)
observeEvent(input$minus, {
newValue <- value() - 1     # newValue <- rv$value - 1
value(newValue)             # rv$value <- newValue
})
observeEvent(input$plus, {
newValue <- value() + 1     # newValue <- rv$value + 1
value(newValue)             # rv$value <- newValue
})
output$value <- renderText({
value()                     # rv$value
})
}
shinyApp(ui, server)
ui <- pageWithSidebar(
headerPanel("CSV Data explorer"),
sidebarPanel(
fileInput('datafile', 'Choose CSV file',
accept=c('text/csv', 'text/comma-separated-values,text/plain')),
htmlOutput("varselect", inline=TRUE),
selectInput("vars", "Select a variable:", choices=htmlOutput("varselect"),
multiple = TRUE)
),
mainPanel(
dataTableOutput("table")
)
)
server <- function(session,input, output) {
Dataset <- reactive({
infile <- input$datafile
if (is.null(infile)) {
return(NULL)
}
read.csv(infile$datapath)
})
output$varselect <- renderUI({
})
observe({
if (identical(Dataset(), '') || identical(Dataset(), data.frame()))
return(NULL)
updateSelectInput(session, inputId="vars", label="Variables to use:",
choices=names(Dataset()), selected=names(Dataset()))
})
output$table <- renderDataTable({
if (is.null(input$vars) || length(input$vars)==0)
return(NULL)
return(Dataset()[,input$vars,drop=FALSE])
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
selectInput("variable", "Select variable", names(iris)),
textInput("title", "title", ""),
plotOutput("plot")
)
server <- function(input, output, session) {
observe({
updateTextInput(session, "title", value = paste(input$variable, "histogram"))
})
output$plot <- renderPlot({
Sys.sleep(1)
ggplot(iris, aes_string(input$variable)) + geom_histogram() +
ggtitle(input$title)
})
}
shinyApp(ui, server)
